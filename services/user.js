// const User = require("../models/user");
const { generateHash, validateHash } = require("../utils/encryption");
const { generateAccessToken, validateAccessToken, generateRefreshToken, validateRefreshToken } = require("../utils/jwt");
const { setResponseHeaders } = require("../utils/utils");

/**
 * Register a new user.
 * @param {Object} req The request object generated by "ExpressJs".
 * @param {Object} res The response object generated by "ExpressJs".
 */
async function register(req, res) {
    const { username, password } = req.body;
    const hashedPass = await generateHash(password);
    const userSettings = { "keepRecord": true };
    const gameSettings = {
        "numberOfPlayers": 1,
        "scoreBelowZero": false,
        "scoreTarget": 0,
        "mainTimer": false,
        "individualTimers": false
    };

    const query = { username: req.body.username };
    req.db.getEntry(query).then(queryRes => {
        const exists = queryRes[0];

        if (!exists) {
            const data = {
                users: {
                    username,
                    password: hashedPass,
                    user_settings: JSON.stringify(userSettings),
                    game_settings: JSON.stringify(gameSettings),
                    ip: req.headers["x-forwarded-for"] || req.socket.remoteAddress
                }
            };

            req.db.createEntry(data).then(createRes => {
                const { insertId } = createRes;
                const accessToken = generateAccessToken({ insertId, username });
                const refreshToken = generateRefreshToken({ insertId, username, token: accessToken });
                const jsonResponse = data.users;
                jsonResponse.id = insertId;
                
                

                req.db.updateEntry(updateData).then(updateRes => {

                    setResponseHeaders(req, res);
                    setTokens(res, accessToken, refreshToken);
                    res.send(JSON.stringify(jsonResponse, null, 4));
                });
            });
        } else {
            res.send(JSON.stringify({ Errors: `The username ${username} is already registered`}, null, 4));
        };
    });

    // console.log("x", validateAccessToken(token));
    // console.log("y", validateRefreshToken(refreshToken));
    // req.db.createEntry(data).then(res => {
        // DONE
        // console.log(res);
    // });
};

/**
 * Handle the user login and send the proper response.
 * @param {Object} req The request object generated by "ExpressJs";
 * @param {Object} res The response object generated by "ExpressJs";
 */
async function login(req, res) {
    const query = { users: { username: req.body.username }};

    req.db.getEntry(query).then(response => {
        const user = response[0];

        if (user) {
            const { id, password } = user;

            validatePassword(req.body.password, password).then((passCheckRes) => {
                if (passCheckRes) {
                    const userData = extractUserData(user);
                    const { accessToken, refreshToken } = generateTokens(user);

                    const updateData = { users: { token: refreshToken, test: "test" }};
                    req.db.updateEntry(id, updateData).then(updateRes => {
                        setResponseHeaders(req, res);
                        setTokens(res, accessToken, refreshToken).then((tokenRes) => {
                            tokenRes.send(prepareUserData(userData, null, 4));
                        });
                    });
                } else {
                    // !!!ERROR!!!
                    setResponseHeaders(req, res)
                        .send({ Errors: "Wrong username or password"});
                };
            });
        } else {
            // !!!ERROR!!!
            setResponseHeaders(req, res);
            res.send({ Errors: "Wrong username or password"});
        };
    });
};

/**
 * Handle the user logout.
 * @param {Object} req The request object generated by "ExpressJs";
 * @param {Object} res The response object generated by "ExpressJs";
 */
async function logout(req, res) {
    res
        .clearCookie("aToken")
        .clearCookie("rToken");
};

/**
 * Check if the user is logged in.
 * @param {Object} req The request object generated by "ExpressJs";
 * @param {Object} res The response object generated by "ExpressJs";
 */
async function checkIfLogged(req, res) {
    const id = req.body && req.body.id ? req.body.id : null;

    if (id) {
        console.log(`${id}\n`, req.headers);
    };

    res.send(`${id}`)
};

/**
 * Updates the user data in the database.
 * @param {Object} data An object containing key value pairs representing the columns and values that will be updated.
 */
async function update(data) {
    // req.db.updateEntry(id, updateData).then(updateRes => {
    //     console.log("updateRes", updateRes);
        
    setResponseHeaders(req, res);
    //     setTokens(res, accessToken, refreshToken)
    //         .send(prepareUserData(userData, null, 4));
    // });
};


/**
 * Validates a passowrd.
 * @param {String} inputPass The password that needs to be validated.
 * @param {String} password The password hash that the password will be compared with.
 * @returns A boolean that indicates if the password is correct or not.
 */
async function validatePassword(inputPass, password) {
    return await validateHash(inputPass, password).then((passCheckRes) => passCheckRes);
};

/**
 * Generate the access and refresh JWT tokens.
 * @param {Object} user an object containing user data (i, username, etc.).
 * @returns An object containing two key value pairs that represent the access and refresh tokens and their respective values.
 */
function generateTokens(user) {
    const { id, username } = user;
    const accessToken = generateAccessToken({ id, username });
    const refreshToken = generateRefreshToken({ id, username, token: accessToken });

    return { accessToken, refreshToken };
};

/**
 * 
 * @param {Object} res The response object generated by "ExpressJs".
 * @returns the "ExpressJs" res.cookie() function (while setting the headers) in order to keep it chainable.
 */
async function setTokens(res, accessToken, refreshToken) {
    const cookieOptions = {
        httpOnly: true,
        sameSite: "None",
        secure: true
    };

    return res.cookie(
        "aToken",
        accessToken, 
        { ...cookieOptions, maxAge: 0.25 * 60 * 60 * 1000 }
    )
    .cookie(
        "rToken",
        refreshToken,
        { ...cookieOptions, maxAge: 365 * 24 * 60 * 60 * 1000 }
    );
};

/**
 * Extracts the user data from the database response.
 * @param {Object} data Accepts an object contianing user data.
 * @returns An object with the properly formated user data.
 */
 function extractUserData(data) {
    return {
        id: data.id,
        username: data.username,
        userSettings: JSON.parse(data.user_settings),
        gameSettings: JSON.parse(data.game_settings),
        token: data.token
    };
};

/**
 * Prepares the user data for the response.
 * @param {Object} data Accepts an object contianing user data.
 * @returns An object with the properly formated user data
 */
function prepareUserData(data) {
    return JSON.stringify({
        id: data.id,
        username: data.username,
        userSettings: data.userSettings,
        gameSettings: data.gameSettings
    });
};

module.exports = () => (req, res, next) => {
    // if (req.session.user) {
    //     res.locals.user = req.session.user;
    //     res.locals.isLogged = true;
    // };

    req.user = {
        register: (...params) => register(req, res, ...params),
        login: () => login(req, res),
        logout: () => logout(res),
        checkIfLogged: () => checkIfLogged(req, res),
        update: (...params) => update(req.session, ...params)
    };

    next();
};