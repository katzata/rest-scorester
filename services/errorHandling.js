const { setResponseHeaders } = require("../utils/utils");

const sqlErrors = {
    "-4078": {
        code: 500,
        message: "No connection to the database."
    },
    // In theory these codes shouldn't be encountered by the user. "In theory"...
    "1054": {
        code: 406,
        message: "You are searching for something that isn't quite there."
    },
    "1146": {
        code: 406,
        message: "Are you trying ot be funny?"
    }
};

/**
 * Send the current errors to the user and the database.
 * @param {Object} req The request object generated by "ExpressJs".
 * @param {Object} res The response object generated by "ExpressJs".
 * @param {Object} errors An object containing a two key value pairs that represent the error code and the list of errors to display.
 */
function sendErrors(req, res, errors) {
    const { code, list } = errors;
    const errorCode = sqlErrors[code] ? sqlErrors[code].code : code;
    const errorMessage = sqlErrors[code] ? [sqlErrors[code].message] : list;

    if (sqlErrors[code] && code !== "-4078") logErrors(req, { errorCode, errorMessage });

    setResponseHeaders(req, res)
        .status(errorCode)
        .send(JSON.stringify({ Errors: errorMessage }));
};

/**
 * Logs an error in the database.
 * Since the front end will not make a request when the use enters invalid data this function should remain pretty much idle. 
 * @param {Object} req The request object generated by "ExpressJs".
 * @param {Object} obj An object containing the error code and message.
 * @property {Number|String} obj.errorCode An SQL or HTTP error code. SQL codes get converted to HTTP codes, while HTTP codes pass through.
 * @property {String} obj.errorMessage The error message.
 */
function logErrors(req, { errorCode, errorMessage }) {
    const forwarded = req.headers['x-forwarded-for'] || "unknown";
    const address = req.socket.remoteAddress || "unknown";
    const error = {
        error_log: {
            "http_x_forwarded": forwarded,
            "remote_addr": address,
            code: errorCode,
            message: errorMessage
        }
    };

    req.db.createEntry(error).then(res => {
        console.log(res);
    });
}

module.exports = () => (req, res, next) => {
    req.errorHandling = {
        sendErrors: (...params) => sendErrors(req, res, ...params)
    };

    next();
};